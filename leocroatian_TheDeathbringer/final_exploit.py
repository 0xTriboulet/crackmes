import textwrap
import frida
import os
import sys
import frida.core
import dumper
import utils
import argparse
import logging
import subprocess
from time import sleep
from itertools import islice

##thanks to https://github.com/Nightbringer21/fridump

## Define Configurations

APP_NAME = "CrackMe.exe"
DIRECTORY = ""
DEBUG_LEVEL = logging.INFO
MAX_SIZE = 20971520
PERMS = 'rw-'

## Start Process
try:
    os.system("rmdir /s /q dump")
except:
    pass
output = subprocess.Popen('start cmd /C CrackMe.exe', shell=True)

sleep(3)
## Creating Directory to Dump Program Memory
print("Current Directory: " + str(os.getcwd()))
DIRECTORY = os.path.join(os.getcwd(), "dump")
print("Output directory is set to: " + DIRECTORY)
if not os.path.exists(DIRECTORY):
    print("Creating directory...")
    os.makedirs(DIRECTORY)
    
mem_access_viol = ""

print("Starting Memory dump...")

session = frida.attach(APP_NAME)
script = session.create_script(
    """'use strict';

    rpc.exports = {
      enumerateRanges: function (prot) {
        return Process.enumerateRangesSync(prot);
      },
      readMemory: function (address, size) {
        return Memory.readByteArray(ptr(address), size);
      }
    };

    """)

script.on("message", utils.on_message)
script.load()

agent = script.exports
ranges = agent.enumerate_ranges(PERMS)

i = 0
l = len(ranges)

# Performing the memory dump
for range in ranges:
    base = range["base"]
    size = range["size"]

    logging.debug("Base Address: " + str(base))
    logging.debug("")
    logging.debug("Size: " + str(size))


    if size > MAX_SIZE:
        logging.debug("Too big, splitting the dump into chunks")
        mem_access_viol = dumper.splitter(
            agent, base, size, MAX_SIZE, mem_access_viol, DIRECTORY)
        continue
    mem_access_viol = dumper.dump_to_file(
        agent, base, size, mem_access_viol, DIRECTORY)
    i += 1
    utils.printProgress(i, l, prefix='Progress:', suffix='Complete', bar=50)
print("")

files = os.listdir(DIRECTORY)
i = 0
l = len(files)
print("Running strings on all files:")
for f1 in files:
    utils.strings(f1, DIRECTORY)
    i += 1
    utils.printProgress(i, l, prefix='Progress:', suffix='Complete', bar=50)
    
f = open(".\dump\strings.txt", 'r')

for line in f:
    if len(line) >= 27 and "=" not in line and "?" not in line and "@" not in line and " " not in line and "abcdefghijklmnopqrstuvwxyz" not in line and "ABCDEFGHIJKLMNOPQRSTUVWXYZ" not in line:
        print("\n\n We found the serial! \n")
        print(line, end="\n\n")
        quit()
    else:
        print(".", end="")

print("\nWe couldn't find the serial...exiting now")
quit()